AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy the Azure Inventory Component of Antiope
Transform: AWS::Serverless-2016-10-31

Parameters:

  pBucketName:
    Description: Name of the bucket to hold the images
    Type: String

  pAzureLambdaLayerPackage:
    Description: Object Key for the Antiope Azure Python Dependencies Lambda Layer
    Type: String

  pAzureServiceSecretName:
    Description: Name of the Azure service account credentials secret
    Type: String

  pAzureServiceSecretString:
    Description: DO NOT UPDATE (A generic Json string to place in the secretsmanager for setup purposes ONLY)
    Type: String
    Default: '{ "generic": "NothingToSeeHere" }'

  pLambdaSNSDelay:
    Description: Number of seconds to delay SNS messages being sent by the subscription trigger function
    Type: String
    Default: 0

  pNumberOfSubsPerGroup:
    Description: Number of subscrptions to group within one SNS message sent by the subscrption trigger function
    Type: String
    Default: 10

  pDefaultLambdaSize:
    Description: Size to assign to all Lambda
    Type: Number
    Default: 1024

  pMaxLambdaDuration:
    Description: How long to let the Lambda Run
    Type: Number
    Default: 300

  pAntiopeMainStackName:
    Description: Name of the Antiope Main Stack
    Type: String

  pErrorQueueURLParamVersion:
    Description: Version of the Param for the ErrorQueueURL
    Type: Number
    Default: 1

  pErrorQueueArnParamVersion:
    Description: Version of the Param for the ErrorQueueArn
    Type: Number
    Default: 1

  pTemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Type: String

  pLambdaLogLevel:
    Description: Logging level for python based lambdas
    AllowedValues: [ DEBUG, INFO, WARNING ]
    Type: String
    Default: INFO

  pCloudGuardSecretArn:
    Type: String
    Default: arn:aws:secretsmanager:us-east-1:501561212468:secret:antiope-cloudguard-subscriptions-curator-dev-OXIli8

Globals:
  Function:
    Runtime: python3.6
    MemorySize: !Ref pDefaultLambdaSize
    Timeout: !Ref pMaxLambdaDuration
    Layers:
        - !Ref AzureInventoryLambdaLayer
    CodeUri: ../lambda
    Environment:
      Variables:
          ERROR_QUEUE: !Sub '{{resolve:ssm:${pAntiopeMainStackName}-ErrorQueueURL:${pErrorQueueURLParamVersion}}}'
          INVENTORY_BUCKET: !Ref pBucketName
          AZURE_SECRET_NAME: !Ref pAzureServiceSecretName
          SUBSCRIPTION_TABLE: !Ref SubscriptionDBTable
          LOGGING: !Ref pLambdaLogLevel
          CLOUDGUARD_SECRET: !Ref pCloudGuardSecretArn

Resources:

  #
  # Secrets Manager Configuration
  #

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used for storing Azure Antiope secrets
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Ref AWS::StackName
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: "kms:*"
          Resource: "*"

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref KMSKey

  AzureServiceSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Azure Antiope Credentials"
      Name: !Ref pAzureServiceSecretName
      SecretString: !Ref pAzureServiceSecretString
      KmsKeyId: !Ref KMSKeyAlias

  #
  # DynamoDB Tables
  #

  # This table has a 1-1 mapping from Azure API for each tenant
  SubscriptionDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-subscriptions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "subscription_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "subscription_id"
          KeyType: "HASH"
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  #
  # Lambda Role
  #

  InventoryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
        - Sid: EmuLambdaTestTrust
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName , /*]]
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName ]]
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: PublishToSNS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Action:
                - sns:publish
              Resource:
                - !Ref TriggerSubscriptionInventoryFunctionTopic
                - !Ref NewActiveSubscriptionTopic
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: DynamoAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !GetAtt SubscriptionDBTable.Arn
            Action:
            - dynamodb:*
            Effect: Allow
      - PolicyName: SendEmails
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ses:*
            Resource: '*'
      - PolicyName: StartStepFunction
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - states:StartExecution
            Resource: '*'
      - PolicyName: DataTableStream
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt SubscriptionDBTable.StreamArn
      - PolicyName: SecretAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "secretsmanager:GetSecretValue"
            Resource: 
              - !Ref AzureServiceSecret
              - !Ref pCloudGuardSecretArn
      - PolicyName: PublishToSQS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            Resource:
              - !Sub '{{resolve:ssm:${pAntiopeMainStackName}-ErrorQueueArn:${pErrorQueueArnParamVersion}}}'
      - PolicyName: KMSAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "kms:Decrypt"
            Resource:
              - !GetAtt KMSKey.Arn

  #
  # Lambda Layer
  #

  AzureInventoryLambdaLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      LayerName: !Sub "${AWS::StackName}-azure-layer"
      CompatibleRuntimes:
        - python3.6
      Content:
        S3Bucket: !Ref pBucketName
        S3Key: !Ref pAzureLambdaLayerPackage
      Description: !Sub "${AWS::StackName}-Azure-Inventory-Libraries"

  #
  # Inventory Lambda Functions
  #

  PullVMDataLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-inventory-vm"
      Description: AWS Lamdba to pull vm data from Azure Organization into the S3
      Handler: inventory-vm.lambda_handler
      Role: !GetAtt InventoryLambdaRole.Arn
      CodeUri: ../lambda

  #
  # Inventory Lambda Functions
  #

  InventoryResourceLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-inventory-resource"
      Description: AWS Lamdba to pull vm data from Azure Organization into the S3
      Handler: inventory-resource.handler
      Role: !GetAtt InventoryLambdaRole.Arn
      CodeUri: ../lambda
  #
  # State Machine Lambda Functions
  #

  InventorySubscriptionsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-inventory-subs"
      Description: AWS Lamdba to discover all Azure Subs and add to the Azure Inventory DDB Table
      Handler: inventory-subs.handler
      Role: !GetAtt InventoryLambdaRole.Arn
      CodeUri: ../lambda

  TriggerSubscriptionActionsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-trigger-collection"
      Description: AWS Lamdba to trigger all the inventorying magicky magicky functions.
      Handler: trigger_sub_actions.handler
      Role: !GetAtt InventoryLambdaRole.Arn
      CodeUri: ../lambda
      Environment:
        Variables:
          TRIGGER_ACCOUNT_INVENTORY_ARN: !Ref TriggerSubscriptionInventoryFunctionTopic
          NUM_SUBS_IN_GROUP: !Ref pNumberOfSubsPerGroup
          SNS_DELAY: !Ref pLambdaSNSDelay

  CreateSubscriptionReportLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-report-subs"
      Description: Create an HTML Report with all the Azure Subscriptions
      Handler: report-subs.handler
      Role: !GetAtt InventoryLambdaRole.Arn
      CodeUri: ../lambda

  #
  # SNS Subs to the Trigger function
  #

  TriggerSubscriptionInventoryFunctionTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Triggers the Antiope Inventory of each Subscription"

  PullVMDataLambdaFunctionTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PullVMDataLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerSubscriptionInventoryFunctionTopic
      Action: lambda:invokeFunction

  PullResourceDataLambdaFunctionTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt InventoryResourceLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref TriggerSubscriptionInventoryFunctionTopic
      Action: lambda:invokeFunction

  PullVMDataLambdaFunctionTriggerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt PullVMDataLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref 'TriggerSubscriptionInventoryFunctionTopic'

  PullResourceLambdaFunctionTriggerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt InventoryResourceLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref 'TriggerSubscriptionInventoryFunctionTopic'

  #
  # New Subscription Handling
  #

  NewSubscriptionHandlerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-sub_handler"
      Description: Function to Handle the discovery of new Subscriptions written to the Subscriptions DDB Table
      Handler: sub_handler.lambda_handler
      Role: !GetAtt InventoryLambdaRole.Arn
      CodeUri: ../lambda
      Environment:
        Variables:
          ACTIVE_TOPIC: !Ref NewActiveSubscriptionTopic

  DataTableStream:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: InventoryLambdaRole
    Properties:
      BatchSize: 25 #trigger one lambda per document
      Enabled: True
      EventSourceArn: !GetAtt SubscriptionDBTable.StreamArn
      FunctionName: !GetAtt NewSubscriptionHandlerLambdaFunction.Arn
      StartingPosition: LATEST #always start at the tail of the stream

  NewActiveSubscriptionTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Notifications of a new Azure Subscription"

  #
  # StateMachine
  #

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              - !GetAtt InventorySubscriptionsLambdaFunction.Arn
              - !GetAtt TriggerSubscriptionActionsLambdaFunction.Arn
              - !GetAtt CreateSubscriptionReportLambdaFunction.Arn
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow

  InventoryProcessStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      StateMachineName: !Ref AWS::StackName
      DefinitionString: !Sub |-
        {
          "Comment": "(${AWS::StackName}) State Machine to Gather Subcription Inventory Information",
          "StartAt": "InventorySubscriptionsLambdaFunction",
          "States": {
            "InventorySubscriptionsLambdaFunction": {
              "Type": "Task",
              "Resource": "${InventorySubscriptionsLambdaFunction.Arn}",
              "Next": "TriggerSubscriptionActionsLambdaFunction"
            },
            "TriggerSubscriptionActionsLambdaFunction": {
              "Type": "Task",
              "Resource": "${TriggerSubscriptionActionsLambdaFunction.Arn}",
              "Next": "WaitForLambdaExecutionsToComplete"
            },
            "WaitForLambdaExecutionsToComplete": {
              "Type": "Wait",
              "Seconds": 30,
              "Next": "CreateSubscriptionReportLambdaFunction"
            },
            "CreateSubscriptionReportLambdaFunction": {
              "Type": "Task",
              "Resource": "${CreateSubscriptionReportLambdaFunction.Arn}",
              "End": true
            }
          }
        }

  #
  # CloudWatch Alarms
  #

  StepFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      AlarmActions:
        - !ImportValue SNSAlertsErrorArn
      AlarmDescription: "Alerts on stepfunction failures"
      AlarmName: !Sub "${AWS::StackName}-StepFunction-Failure"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref InventoryProcessStateMachine
      EvaluationPeriods: 1
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      OKActions:
        - !ImportValue SNSAlertsInfoArn
      Period: 300
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching


  #
  # Dashboard
  #

  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Ref AWS::StackName
      DashboardBody: !Sub |-
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 24,
              "height": 9,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${AWS::StackName}-inventory-subs", { "stat": "Sum", "period": 604800, "label": "inventory-subs"} ],
                  [ "...", "${AWS::StackName}-trigger-collection", { "stat": "Sum", "period": 604800, "label": "trigger-collection" } ],
                  [ "...", "${AWS::StackName}-inventory-vm", { "stat": "Sum", "period": 604800, "label": "inventory-vm" } ],
                  [ "...", "${AWS::StackName}-sub_handler", { "stat": "Sum", "period": 604800, "label": "sub_handler" } ],
                  [ "...", "${AWS::StackName}-report-subs", { "stat": "Sum", "period": 604800, "label": "report-subs" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Invocation",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 9,
              "width": 24,
              "height": 9,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${AWS::StackName}-inventory-subs", { "stat": "Sum", "period": 604800, "label": "inventory-subs"} ],
                  [ "...", "${AWS::StackName}-trigger-collection", { "stat": "Sum", "period": 604800, "label": "trigger-collection" } ],
                  [ "...", "${AWS::StackName}-inventory-vm", { "stat": "Sum", "period": 604800, "label": "inventory-vm" } ],
                  [ "...", "${AWS::StackName}-sub_handler", { "stat": "Sum", "period": 604800, "label": "sub_handler" } ],
                  [ "...", "${AWS::StackName}-report-subs", { "stat": "Sum", "period": 604800, "label": "report-subs" } ]
                ],
                "region": "${AWS::Region}",
                "title": "Lambda Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 18,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "singleValue",
                "metrics": [
                  [ "AWS/States", "ExecutionsStarted", "StateMachineArn", "${InventoryProcessStateMachine}", { "stat": "Sum", "period": 604800, "label": "Started" } ],
                  [ ".", "ExecutionsSucceeded", ".", ".", { "stat": "Sum", "period": 604800, "label": "Succeeded" } ],
                  [ ".", "ExecutionsFailed", ".", ".", { "stat": "Sum", "period": 604800, "label": "Failed" } ]
                ],
                "region": "${AWS::Region}",
                "title": "StateMachine Executions",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 24,
              "width": 24,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/DynamoDB", "ThrottledRequests", "TableName", "${SubscriptionDBTable}", "Operation", "UpdateItem", { "stat": "Sum", "period": 300 } ]
                ],
                "region": "${AWS::Region}",
                "title": "DDB Throttling"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 21,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/States", "ExecutionTime", "StateMachineArn", "${InventoryProcessStateMachine}", { "stat": "Sum", "period": 300 } ]
                ],
                "region": "${AWS::Region}",
                "annotations": {
                  "horizontal": [{"label": "10Min", "value": 600000 }]
                },
                "title": "State Machine ExecutionTime",
                "period": 300,
                "yAxis": {"left": {"min": 0 } }
              }
            },
            {
              "title": "DynamoDB Activity",
              "type": "metric",
              "x": 0,
              "y": 27,
              "width": 24,
              "height": 9,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${SubscriptionDBTable}", { "stat": "Sum", "period": 60 } ],
                  [ ".", "ConsumedWriteCapacityUnits", "TableName", "${SubscriptionDBTable}", { "stat": "Sum", "period": 60 } ]
                ],
                "region": "${AWS::Region}",
                "title": "DynamoDB Activity",
                "period": 300
              }
            },
            {
              "type": "text",
              "x": 12,
              "y": 21,
              "width": 6,
              "height": 3,
              "properties": {
                "markdown": "\n# Quick Links\n* [StateMachine](https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${InventoryProcessStateMachine})\n* [S3 Bucket](https://s3.console.aws.amazon.com/s3/buckets/${pBucketName}/?region=${AWS::Region}&tab=overview)\n"
              }
            },
            {
              "type": "text",
              "x": 18,
              "y": 21,
              "width": 6,
              "height": 3,
              "properties": {
                "markdown": "\n# Tables\n* [Subscriptions](\nhttps://console.aws.amazon.com/dynamodb/home?region=${AWS::Region}#tables:selected=${SubscriptionDBTable})\n"
              }
            },
            {
              "type": "text",
              "x": 12,
              "y": 18,
              "width": 12,
              "height": 3,
              "styles": "undefined",
              "properties": {
                  "markdown": "\n# Stack Info\n* **Template URL**: ${pTemplateURL}\n"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 36,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [[ "AWS/S3", "BucketSizeBytes", "StorageType", "StandardStorage", "BucketName", "${pBucketName}", { "period": 86400 } ] ],
                "region": "${AWS::Region}",
                "yAxis": {"left": {"min": 0 } },
                "title": "Inventory Storage Used"
                }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 36,
              "width": 12,
              "height": 3,
              "properties": {
                "view": "timeSeries",
                "stacked": false,
                "metrics": [[ "AWS/S3", "NumberOfObjects", "StorageType", "AllStorageTypes", "BucketName", "${pBucketName}", { "period": 86400 } ] ],
                "region": "${AWS::Region}",
                "yAxis": {"left": {"min": 0 } },
                "title": "Inventory Object Count"
              }
            }
          ]
        }


Outputs:
  StackName:
    Description: Name of this Stack
    Value: !Ref AWS::StackName

  TemplateURL:
    Description: URL to the Transformed Template this stack was deployed with (for promotion to another environment)
    Value: !Ref pTemplateURL

  InventoryTriggerTopic:
    Value: !Ref TriggerSubscriptionInventoryFunctionTopic
    Description: Topic that triggers the per-account inventory lambda. You can subscribe custom lambda to this topic

  NewActiveSubscriptionTopic:
    Value: !Ref NewActiveSubscriptionTopic
    Description: The discovery of new subscriptions is sent to this topic.

  InventoryProcessStateMachine:
    Description: Arn of the Azure Inventory State Machine
    Value: !Ref InventoryProcessStateMachine

  BucketName:
    Value: !Ref pBucketName
    Description: Name of S3 Bucket where all files are stored

  DynamoDBTableName:
    Value: !Ref SubscriptionDBTable
    Description: Name of the DynamodDB table that holds azure subscriptions

  TriggerFunctionDelay:
    Value: !Ref pLambdaSNSDelay
    Description: Number of seconds to delay SNS messages being sent by the subscription trigger function
